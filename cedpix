#include <SoftwareSerial.h>
#include <Wire.h>
#include <LiquidCrystal_I2C.h>

// Define pins for the GSM module
const int RX = 10;
const int TX = 11;
SoftwareSerial gsm(RX, TX);

// Define pins for soil moisture sensor and ultrasonic sensor
const int soilMoisturePin = A0;
const int trigPin = 9;
const int echoPin = 8;

// Define pump pin
const int pumpPin = 7;

// Threshold values
const int soilMoistureThreshold = 80; // 80%
const int waterLevelThreshold = 20; // 20%

// Tank parameters
const float tankMaxDistance = 2.0; // Distance in cm for 100% water level
const float tankHeight = 100.0; // Total tank height in cm

// Initialize LCD (I2C address 0x27, 16 columns, 2 rows)
LiquidCrystal_I2C lcd(0x27, 16, 2);

void setup() {
  // Initialize serial communication
  Serial.begin(9600);
  gsm.begin(9600);

  // Initialize pin modes
  pinMode(trigPin, OUTPUT);
  pinMode(echoPin, INPUT);
  pinMode(pumpPin, OUTPUT);

  // Ensure the pump is off at startup
  digitalWrite(pumpPin, LOW);

  // Initialize LCD
  lcd.init(); // Corrected to init instead of begin for LCD initialization
  lcd.backlight();
  lcd.setCursor(0, 0);
  lcd.print("System Init...");
  delay(2000);
  lcd.clear();
  Serial.println("System Initialized.");
}

void loop() {
  // Read soil moisture value (0-1023) and convert to percentage
  int soilMoistureValue = analogRead(soilMoisturePin);
  int soilMoisturePercent = map(soilMoistureValue, 1023, 0, 0, 100);

  // Measure water level using ultrasonic sensor
  long duration;
  float waterLevelDistance, waterLevelPercent;

  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);

  duration = pulseIn(echoPin, HIGH);
  waterLevelDistance = (duration / 2.0) * 0.0343; // Convert to centimeters

  // Convert water level distance to percentage
  if (waterLevelDistance <= tankMaxDistance) {
    waterLevelPercent = 100.0; // Maximum water level
  } else if (waterLevelDistance >= tankHeight) {
    waterLevelPercent = 0.0; // Empty tank
  } else {
    waterLevelPercent = map(waterLevelDistance, tankMaxDistance, tankHeight, 100, 0);
  }

  // Print values for debugging
  Serial.print("Soil Moisture: ");
  Serial.print(soilMoisturePercent);
  Serial.println("%");

  Serial.print("Water Level: ");
  Serial.print(waterLevelPercent);
  Serial.println("%");

  // Display values on LCD
  lcd.setCursor(0, 0);
  lcd.print("Soil: ");
  lcd.print(soilMoisturePercent);
  lcd.print("% ");

  lcd.setCursor(0, 1);
  lcd.print("Water: ");
  lcd.print(waterLevelPercent);
  lcd.print("% ");

  // Check conditions and control pump
  if (soilMoisturePercent < soilMoistureThreshold && waterLevelPercent > waterLevelThreshold) {
    if (digitalRead(pumpPin) == LOW) {
      digitalWrite(pumpPin, HIGH); // Turn on pump
      Serial.println("Pump ON: Irrigation in progress...");
      lcd.setCursor(0, 1);
      lcd.print("Pump: ON       ");
      sendSMS("Irrigation started: Soil moisture low and water level sufficient.");
    }
  } else {
    if (digitalRead(pumpPin) == HIGH) {
      digitalWrite(pumpPin, LOW); // Turn off pump
      Serial.println("Pump OFF: Conditions not met.");
      lcd.setCursor(0, 1);
      lcd.print("Pump: OFF      ");
    }
  }

  // Add delay to avoid rapid switching
  delay(5000);
}

void sendSMS(String message) {
  gsm.println("AT"); // Ensure GSM is responsive
  delay(100);
  gsm.println("AT+CMGF=1"); // Set GSM to text mode
  delay(100);
  gsm.println("AT+CMGS=\"+1234567890\""); // Replace with your phone number
  delay(100);
  gsm.println(message);
  delay(100);
  gsm.write(26); // ASCII code for CTRL+Z to send message
  delay(1000);
  Serial.println("SMS Sent: " + message);
}
